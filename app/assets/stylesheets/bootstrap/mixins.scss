
/* ==============================================================================
   Mixins
   Snippets of reusable CSS to develop faster and keep code readable
   =========================================================================== */

/* CSS3 Properties
================================================== */

// Background clipping
// Heads up: FF 3.6 and under need padding instead of padding-box
@mixin background-clip($clip) {
  -webkit-background-clip: $clip;
     -moz-background-clip: $clip;
          background-clip: $clip;
}

// Background sizing
@mixin background-size($size){
  -webkit-background-size: $size;
     -moz-background-size: $size;
       -o-background-size: $size;
          background-size: $size;
}

// Border Radius
@mixin border-radius($radius: 3px) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
          border-radius: $radius;
}

// Box sizing
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}

// Drop shadows
@mixin box-shadow($shadow: 0 1px 4px rgba(0,0,0,.25)) {
  -webkit-box-shadow: $shadow;
     -moz-box-shadow: $shadow;
          box-shadow: $shadow;
}

// Opacity
@mixin opacity($opacity: 100) {
  opacity: $opacity / 100;
   filter: alpha(opacity=$opacity);
}

// Resize anything
@mixin resizable($direction: both) {
  resize: $direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}

// Text Shadows
@mixin text-shadow-light() {
  text-shadow: 0 1px 0 rgba(255,255,255,1);
}

@mixin text-shadow-dark() {
  text-shadow: 0 -1px 0 rgba(0,0,0,.65);
}

// Transitions
@mixin transition($transition) {
  -webkit-transition: $transition;
     -moz-transition: $transition;
      -ms-transition: $transition;
       -o-transition: $transition;
          transition: $transition;
}

// User select
// For selecting text on the page
@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
       -o-user-select: $select;
          user-select: $select;
}

/* Utility Mixins
================================================== */

// Clearfix for clearing floats like a boss h5bp.com/q
@mixin clearfix() {
  *zoom: 1;

  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after { clear: both; }
}

// Webkit-style focus
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 1px solid -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Center-align a block level element
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// IE7 inline-block
@mixin ie7-inline-block() {
  *display: inline; /* IE7 inline-block hack */
  *zoom: 1;
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
@mixin ie7-restore-left-whitespace() {
  *margin-left: .3em;
  &:first-child { *margin-left: 0; }
}

@mixin ie7-restore-right-whitespace() {
  *margin-right: .3em;
  &:last-child { *margin-left: 0; }
}

// Sizing shortcuts
@mixin size($height: 5px, $width: 5px) {
  height: $height;
  width: $width;
}

@mixin square($size: 5px) {
  @include size($size, $size);
}

// Placeholder text
@mixin placeholder($color: $grayLight) {
  :-moz-placeholder { color: $color; }
  ::-webkit-input-placeholder { color: $color; }
}

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Forms
================================================== */

// Block level inputs
@mixin input-block-level {
  display: block;
  min-height: 28px;        // Make inputs at least the height of their button counterpart
  width: 100%;
  @include box-sizing(border-box); // Makes inputs behave like true block-level elements
}

// Mixin for form field states
@mixin formFieldState($textColor: #555, $borderColor: #ccc, $backgroundColor: #f5f5f5) {

  // Set the text color
  > label,
  .help-block,
  .help-inline {
    color: $textColor;
  }

  // Style inputs accordingly
  input,
  select,
  textarea {
    border-color: $borderColor;
    color: $textColor;

    &:focus {
      border-color: darken($borderColor, 10%);
      @include box-shadow(0 0 6px lighten($borderColor, 20%));
    }
  }

  // Give a small background color for input-prepend/-append
  .input-prepend .add-on,
  .input-append .add-on {
    background-color: $backgroundColor;
    border-color: $textColor;
    color: $textColor;
  }
}

/* Backgrounds
================================================== */

// Add an alphatransparency value to any background or border color (via Elyse Holladay)
@mixin translucent-background($color: $white, $alpha: 1) {
    background-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
}

@mixin translucent-border($color: $white, $alpha: 1) {
  border-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
  @include background-clip(padding-box);
}

/* Gradients
================================================== */

@mixin gradient-horizontal($startColor: #555, $endColor: #333) {
  background-color: $endColor;
  background-image: -moz-linear-gradient(left, $startColor, $endColor); // FF 3.6+
  background-image: -ms-linear-gradient(left, $startColor, $endColor); // IE10
  background-image: -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(left, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient(left, $startColor, $endColor); // Opera 11.10
  background-image: linear-gradient(left, $startColor, $endColor); // Le standard
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=1), $startColor, $endColor; // IE9 and down
}

@mixin gradient-vertical($startColor: #555, $endColor: #333) {
  background-color: mix($startColor, $endColor, 60%);
  background-image: -moz-linear-gradient(top, $startColor, $endColor); // FF 3.6+
  background-image: -ms-linear-gradient(top, $startColor, $endColor); // IE10
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(top, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient(top, $startColor, $endColor); // Opera 11.10
  background-image: linear-gradient(top, $startColor, $endColor); // The standard
  background-repeat: repeat-x;
 filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=0),$startColor,$endColor; // IE9 and down
}

@mixin gradient-directional($startColor: #555, $endColor: #333, $deg: 45deg) {
  background-color: $endColor;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient($deg, $startColor, $endColor); // FF 3.6+
  background-image: -ms-linear-gradient($deg, $startColor, $endColor); // IE10
  background-image: -webkit-linear-gradient($deg, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient($deg, $startColor, $endColor); // Opera 11.10
  background-image: linear-gradient($deg, $startColor, $endColor); // The standard
}

@mixin gradient-vertical-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
  background-color: mix($midColor, $endColor, 80%);
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
  background-image: -webkit-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: -moz-linear-gradient(top, $startColor, $midColor $colorStop, $endColor);
  background-image: -ms-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: -o-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=0), $startColor, $endColor; // IE9 and down, gets no color-stop at all the proper fallback
}

@mixin gradient-radial($centerColor: #555, $outsideColor: #333)  {
  background-color: $outerColor;
  background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($centerColor), to($outsideColor));
  background-image: -webkit-radial-gradient(circle, $centerColor, $outsideColor);
  background-image: -moz-radial-gradient(circle, $centerColor, $outsideColor);
  background-image: -ms-radial-gradient(circle, $centerColor, $outsideColor);
  background-repeat: no-repeat;
  // Opera cannot do radial gradients yet
}

@mixin gradient-striped($color,$angle: -45deg) {
    background-color: $color;
    background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
    background-image: -webkit-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-image: -moz-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-image: -ms-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-image: -o-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    //background-image: linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  }

// Gradient Bar Colors for buttons and alerts
@mixin gradientBar($primaryColor, $secondaryColor) {
  @include gradient-vertical($primaryColor, $secondaryColor);
  border-color: $secondaryColor $secondaryColor darken($secondaryColor, 15%);
  border-color: rgba(0,0,0,.1) rgba(0,0,0,.1) fade-in(rgba(0,0,0,.1), 0.15);
}

// Reset filters for IE
@mixin reset-filter() {
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
}

// Mixin for generating button backgrounds
@mixin buttonBackground($startColor, $endColor) {
  // gradientBar will set the background to a pleasing blend of these, to support IE<=9
  @include gradientBar($startColor, $endColor);
  @include reset-filter();

  // in these cases the gradient won't cover the background, so we override
  &:hover, &:active, &.active, &.disabled, &[disabled] {
    background-color: $endColor;
  }

  // IE 7 + 8 can't handle box-shadow to show active, so we darken a bit ourselves
  &:active,
  &.active {
    background-color: darken($endColor, 10%) #{"\9"};
  }
}

/* Icon Sizing
================================================== */

@mixin icon-size($size: 16px) {
  height: $size;
  width: $size;

  &:before {
    font-size: $size;
    line-height: $size;
  }
}

/* Popover arrows (for tipsies and popovers)
================================================== */

@mixin popoverArrow-top($arrowWidth: 5px) {
  border-left: $arrowWidth solid transparent;
  border-right: $arrowWidth solid transparent;
  border-top: $arrowWidth solid $black;
  bottom: 0;
  left: 50%;
  margin-left: -$arrowWidth;
}

@mixin popoverArrow-left($arrowWidth: 5px) {
  border-bottom: $arrowWidth solid transparent;
  border-left: $arrowWidth solid $black;
  border-top: $arrowWidth solid transparent;
  margin-top: -$arrowWidth;
  right: 0;
  top: 50%;
}

@mixin popoverArrow-bottom($arrowWidth: 5px) {
  border-bottom: $arrowWidth solid $black;
  border-left: $arrowWidth solid transparent;
  border-right: $arrowWidth solid transparent;
  left: 50%;
  margin-left: -$arrowWidth;
  top: 0;
}

@mixin popoverArrow-right($arrowWidth: 5px) {
  border-bottom: $arrowWidth solid transparent;
  border-right: $arrowWidth solid $black;
  border-top: $arrowWidth solid transparent;
  left: 0;
  margin-top: -$arrowWidth;
  top: 50%;
}

@mixin callout($color: $black, $size: 12px) {
  @include gradient-vertical(lighten($color, 5%), $color);
  display: inline-block;
  position: relative;

  &:before {
    border: solid;
    border-color: $color transparent;
    border-width: $size $size 0 $size;
    content: "";
    display: block;
    left: 50%;
    margin-left: ($size * -1);
    position: absolute;
    text-align: center;
    top: 100%;
    z-index: 10;
  }
}

/* Navbar vertical align
================================================== */

// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out
// `.navbarVerticalAlign(30px);` to calculate the appropriate top margin.
@mixin navbarVerticalAlign($elementHeight) {
  margin-top: ($navbarHeight - $elementHeight) / 2;
}

/* ==============================================================================
   Grid System
   =========================================================================== */

// Centered container element
@mixin container-fixed() {
  margin-left: auto;
  margin-right: auto;
  width: $gridRowWidth;
  @include clearfix();
}

/* Table Columns
-------------------------------------------------- */
@mixin tableColumns($columnSpan: 1) {
  float: none; // undo default grid column styles
  width: ( ($gridColumnWidth) * $columnSpan ) + ( $gridGutterWidth * ($columnSpan - 1) ) - 16; // 16 is total padding on left and right of table cells
  margin-left: 0; // undo default grid column styles
}

/* Make a Grid
   Use .makeRow and .makeColumn to assign
   semantic layouts grid system behavior
-------------------------------------------------- */

@mixin makeRow() {
  margin-left: $gridGutterWidth * -1;
  @include clearfix();
}

@mixin makeColumn($columns: 1) {
  float: left;
  margin-left: $gridGutterWidth;
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

/* The Grid
-------------------------------------------------- */
@mixin gridSystem-columns ($gridGutterWidth, $gridColumnWidth, $gridRowWidth, $columns) {
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

@mixin gridSystem-offset($gridColumnWidth, $gridGutterWidth, $columns) {
  margin-left: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1)) + ($gridGutterWidth * 2);
}

@mixin gridSystem-gridColumn($gridGutterWidth) {
  float: left;
  margin-left: $gridGutterWidth;
}

// Take these values and mixins, and make 'em do their thang
@mixin gridSystem-generate($gridColumns, $gridColumnWidth, $gridGutterWidth) {

  .row {
    margin-left: $gridGutterWidth * -1;
    @include clearfix();
  }

  // Find all .span# classes within .row and give them the necessary properties
  // for grid columns (supported by all browsers back to IE7, thanks $dhg)
  [class*="span"] {
    @include gridSystem-gridColumn($gridGutterWidth);
  }

  // Default columns
  @for $i from 1 through $gridColumns {
    .span#{$i} { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, $i); }
  }

  .container,
  .navbar-fixed-top .container,
  .navbar-fixed-bottom .container {
    @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 12);
  }

  // Offset column options
  @for $i from 1 through $gridColumns - 1 {
    .offset#{$i} { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, $i); }
  }
}

/* Fluid Grid
-------------------------------------------------- */
@mixin fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, $columns) {
  width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
}

@mixin fluidGridSystem-gridColumn($fluidGridGutterWidth) {
  float: left;
  margin-left: $fluidGridGutterWidth;
}

// Take these values and mixins, and make 'em do their thang
@mixin fluidGridSystem-generate($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth) {

  .row-fluid {
    width: 100%;
    @include clearfix();

    // Find all .span# classes within .row and give them the necessary properties for grid columns (supported by all browsers back to IE7, thanks $dhg)
    > [class*="span"] {
      @include fluidGridSystem-gridColumn($fluidGridGutterWidth);
    }

    > [class*="span"]:first-child {
      margin-left: 0;
    }

    // Default columns
    @for $i from 1 through $gridColumns {
      > .span#{$i} { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, $i); }
    }
  }
}

/* Input Grid
-------------------------------------------------- */

@mixin inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, $columns) {
  width: (($gridColumnWidth) * $columns) + ($gridGutterWidth * ($columns - 1)) - 10;
}

@mixin inputGridSystem-generate($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  input,
  textarea,
  .uneditable-input {
    @for $i from 1 through $gridColumns {
      &.span#{$i} { @include inputGridSystem-inputColumns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, $i); }
    }
  }
}
